ðŸ“¦ Required Deliverables (Priority Order)

### 1. **Two NPM Packages** (CRITICAL - PRIMARY DELIVERABLE)
```
@near-js/jsonrpc-types    # Types and Zod schemas only
@near-js/jsonrpc-client   # Full RPC client implementation
```

### 2. **GitHub Repository** (CRITICAL - PRIMARY DELIVERABLE)
- Public repository with MIT or Apache-2.0 license
- Complete codebase ready for production use
- Proper monorepo structure with workspaces

### 3. **GitHub Actions Automation** (CRITICAL - PRIMARY DELIVERABLE)
- Automated OpenAPI spec fetching and code regeneration
- CI/CD pipeline for testing and publishing
- Automated PR creation for spec updates
- Release-please integration for version management

### 4. **Testing Suite** (CRITICAL - PRIMARY DELIVERABLE)
- 80%+ test coverage requirement
- Unit tests for type safety and validation
- Integration tests with RPC endpoints
- Mock testing capabilities

### 5. **Documentation** (CRITICAL - PRIMARY DELIVERABLE)
- Developer-focused README for both packages
- Usage examples and API documentation
- Contribution guidelines
- Deployment workflow documentation

## ðŸ”§ Technical Requirements

### OpenAPI Processing Rules
```typescript
// CRITICAL: OpenAPI spec paths don't match actual implementation
// The spec uses unique paths like "/block", "/status" etc.
// BUT actual NEAR JSON-RPC always uses "/" path only
// YOU MUST patch the generated code to use "/" for all requests

const RPC_ENDPOINT = "https://rpc.mainnet.near.org/"; // Always use "/"
```

### Package A: @near-js/jsonrpc-types
- **Purpose**: Lightweight types and Zod schemas only
- **Dependencies**: Only `zod` 
- **Features**: Tree-shakable, snake_case â†’ camelCase conversion
- **Output**: TypeScript interfaces + Zod validation schemas

### Package B: @near-js/jsonrpc-client  
- **Purpose**: Full RPC client implementation
- **Dependencies**: `@near-js/jsonrpc-types`, `zod`
- **Features**: Fetch-based calls, auto-typed requests/responses, error handling
- **Output**: Complete RPC client class with all methods

### Code Generation Pipeline
```typescript
// Required transformation pipeline:
1. Fetch OpenAPI spec from nearcore repo
2. Parse and extract method definitions
3. Convert snake_case to camelCase
4. Generate TypeScript interfaces
5. Generate Zod schemas for validation
6. Generate client methods with proper typing
7. PATCH: Override all paths to use "/" only
```
